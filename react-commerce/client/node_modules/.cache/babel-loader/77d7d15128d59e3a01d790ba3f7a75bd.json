{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\aschl\\\\Desktop\\\\bootcamp\\\\react-commerce\\\\react-commerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\aschl\\\\Desktop\\\\bootcamp\\\\react-commerce\\\\react-commerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\aschl\\\\Desktop\\\\bootcamp\\\\react-commerce\\\\react-commerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\aschl\\\\Desktop\\\\bootcamp\\\\react-commerce\\\\react-commerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\aschl\\\\Desktop\\\\bootcamp\\\\react-commerce\\\\react-commerce\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\aschl\\\\Desktop\\\\bootcamp\\\\react-commerce\\\\react-commerce\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport Navbar from './components/Navbar';\nimport Profile from './components/Profile';\nimport Container from './components/Container';\nimport Blog from './components/Blog';\nimport Product from './components/Product';\nimport Button from './components/Button';\nimport { Widget, addResponseMessage } from 'react-chat-widget';\nimport 'react-chat-widget/lib/styles.css';\nimport logo from \"./logo.svg\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null\n    };\n\n    _this.getDataFromDb = function () {\n      fetch(\"/api/getData\").then(function (data) {\n        return data.json();\n      }).then(function (res) {\n        return _this.setState({\n          data: res.data\n        });\n      });\n    };\n\n    _this.putDataToDB = function (message) {\n      var currentIds = _this.state.data.map(function (data) {\n        return data.id;\n      });\n\n      var idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"/api/putData\", {\n        id: idToBeAdded,\n        message: message\n      });\n    };\n\n    _this.deleteFromDB = function (idTodelete) {\n      var objIdToDelete = null;\n\n      _this.state.data.forEach(function (dat) {\n        if (dat.id === idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n\n      axios.delete(\"/api/deleteData\", {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    _this.updateDB = function (idToUpdate, updateToApply) {\n      var objIdToUpdate = null;\n\n      _this.state.data.forEach(function (dat) {\n        if (dat.id === idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n\n      axios.post(\"/api/updateData\", {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n\n    _this.handleNewUserMessage = function (newMessage) {\n      console.log(\"New message incoming! \".concat(newMessage)); // addResponseMessage(response);\n    };\n\n    _this.responseGoogle = function (response) {\n      console.log(response);\n    };\n\n    _this.onFailure = function (error) {\n      alert(error);\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has \n    // changed and implement those changes into our UI\n    value: function componentDidMount() {\n      addResponseMessage(\"Welcome to our chat! How can I assist you today?\");\n      this.getDataFromDb();\n\n      if (!this.state.intervalIsSet) {\n        var interval = setInterval(this.getDataFromDb, 1000);\n        this.setState({\n          intervalIsSet: interval\n        });\n      }\n    } // never let a process live forever \n    // always kill a process everytime we are done using it\n\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.state.intervalIsSet) {\n        clearInterval(this.state.intervalIsSet);\n        this.setState({\n          intervalIsSet: null\n        });\n      }\n    } // our first get method that uses our backend api to \n    // fetch data from our data base\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var data = this.state.data;\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(\"ul\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, data.length <= 0 ? \"NO DB ENTRIES YET\" : data.map(function (dat) {\n        return React.createElement(\"li\", {\n          style: {\n            padding: \"10px\"\n          },\n          key: data.message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 124\n          },\n          __self: this\n        }, React.createElement(\"span\", {\n          style: {\n            color: \"gray\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }, \" id: \"), \" \", dat.id, \" \", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125\n          },\n          __self: this\n        }), React.createElement(\"span\", {\n          style: {\n            color: \"gray\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, \" data: \"), dat.message);\n      })), React.createElement(\"div\", {\n        style: {\n          padding: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        onChange: function onChange(e) {\n          return _this2.setState({\n            message: e.target.value\n          });\n        },\n        placeholder: \"add something in the database\",\n        style: {\n          width: \"200px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.putDataToDB(_this2.state.message);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"ADD\")), React.createElement(\"div\", {\n        style: {\n          padding: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        style: {\n          width: \"200px\"\n        },\n        onChange: function onChange(e) {\n          return _this2.setState({\n            idToDelete: e.target.value\n          });\n        },\n        placeholder: \"put id of item to delete here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.deleteFromDB(_this2.state.idToDelete);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, \"DELETE\")), React.createElement(\"div\", {\n        style: {\n          padding: \"10px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        style: {\n          width: \"200px\"\n        },\n        onChange: function onChange(e) {\n          return _this2.setState({\n            idToUpdate: e.target.value\n          });\n        },\n        placeholder: \"id of item to update here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"text\",\n        style: {\n          width: \"200px\"\n        },\n        onChange: function onChange(e) {\n          return _this2.setState({\n            updateToApply: e.target.value\n          });\n        },\n        placeholder: \"put new value of the item here\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        onClick: function onClick() {\n          return _this2.updateDB(_this2.state.idToUpdate, _this2.state.updateToApply);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, \"UPDATE\")), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"container-fluid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"col-md-2 d-none d-md-block bg-light sidebar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, React.createElement(Profile, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"col-md-9\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"mt-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }, React.createElement(Blog, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186\n        },\n        __self: this\n      }), React.createElement(Product, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187\n        },\n        __self: this\n      }), React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188\n        },\n        __self: this\n      })), React.createElement(Widget, {\n        handleNewUserMessage: this.handleNewUserMessage,\n        profileAvatar: logo,\n        title: \"My New Title of Chat\",\n        subtitle: \"And subtitle\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      })))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["C:\\Users\\aschl\\Desktop\\bootcamp\\react-commerce\\react-commerce\\client\\src\\App.js"],"names":["React","Component","axios","Navbar","Profile","Container","Blog","Product","Button","Widget","addResponseMessage","App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","handleNewUserMessage","newMessage","console","log","responseGoogle","response","onFailure","error","alert","interval","setInterval","clearInterval","length","padding","color","e","target","value","width","logo"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport axios from \"axios\";\r\nimport Navbar from './components/Navbar';\r\nimport Profile from './components/Profile';\r\nimport Container from './components/Container';\r\nimport Blog from './components/Blog';\r\nimport Product from './components/Product';\r\nimport Button from './components/Button';\r\nimport { Widget, addResponseMessage } from 'react-chat-widget';\r\nimport 'react-chat-widget/lib/styles.css';\r\n\r\nimport logo from './logo.svg';\r\n\r\nclass App extends Component {\r\n  // initialize our state \r\n  state = {\r\n    data: [],\r\n    id: 0,\r\n    message: null,\r\n    intervalIsSet: false,\r\n    idToDelete: null,\r\n    idToUpdate: null,\r\n    objectToUpdate: null\r\n  };\r\n    // when component mounts, first thing it does is fetch all existing data in our db\r\n  // then we incorporate a polling logic so that we can easily see if our db has \r\n  // changed and implement those changes into our UI\r\n  componentDidMount() {\r\n    addResponseMessage(\"Welcome to our chat! How can I assist you today?\");\r\n    this.getDataFromDb();\r\n    if (!this.state.intervalIsSet) {\r\n      let interval = setInterval(this.getDataFromDb, 1000);\r\n      this.setState({ intervalIsSet: interval });\r\n    }\r\n  }\r\n\r\n    // never let a process live forever \r\n  // always kill a process everytime we are done using it\r\n  componentWillUnmount() {\r\n    if (this.state.intervalIsSet) {\r\n      clearInterval(this.state.intervalIsSet);\r\n      this.setState({ intervalIsSet: null });\r\n    }\r\n  }\r\n  \r\n    // our first get method that uses our backend api to \r\n  // fetch data from our data base\r\n  getDataFromDb = () => {\r\n    fetch(\"/api/getData\")\r\n      .then(data => data.json())\r\n      .then(res => this.setState({ data: res.data }));\r\n  };\r\n\r\n  // our put method that uses our backend api\r\n  // to create new query into our data base\r\n  putDataToDB = message => {\r\n    let currentIds = this.state.data.map(data => data.id);\r\n    let idToBeAdded = 0;\r\n    while (currentIds.includes(idToBeAdded)) {\r\n      ++idToBeAdded;\r\n    }\r\n\r\n    axios.post(\"/api/putData\", {\r\n      id: idToBeAdded,\r\n      message: message\r\n    });\r\n  };\r\n\r\n    // our delete method that uses our backend api \r\n  // to remove existing database information\r\n  deleteFromDB = idTodelete => {\r\n    let objIdToDelete = null;\r\n    this.state.data.forEach(dat => {\r\n      if (dat.id === idTodelete) {\r\n        objIdToDelete = dat._id;\r\n      }\r\n    });\r\n\r\n    axios.delete(\"/api/deleteData\", {\r\n      data: {\r\n        id: objIdToDelete\r\n      }\r\n    });\r\n  };\r\n\r\n    // our update method that uses our backend api\r\n  // to overwrite existing data base information\r\n  updateDB = (idToUpdate, updateToApply) => {\r\n    let objIdToUpdate = null;\r\n    this.state.data.forEach(dat => {\r\n      if (dat.id === idToUpdate) {\r\n        objIdToUpdate = dat._id;\r\n      }\r\n    });\r\n\r\n    axios.post(\"/api/updateData\", {\r\n      id: objIdToUpdate,\r\n      update: { message: updateToApply }\r\n    });\r\n  };\r\n\r\n  handleNewUserMessage = (newMessage) => {\r\n    console.log(`New message incoming! ${newMessage}`);\r\n    // addResponseMessage(response);\r\n  }\r\n\r\n  responseGoogle = (response) => {\r\n    console.log(response);\r\n}\r\n\r\n  onFailure = (error) => {\r\n    alert(error);\r\n  }\r\n\r\n  render() {\r\n    const { data } = this.state;\r\n    return (\r\n      <div className=\"App\">\r\n              <ul>\r\n          {data.length <= 0\r\n            ? \"NO DB ENTRIES YET\"\r\n            : data.map(dat => (\r\n                <li style={{ padding: \"10px\" }} key={data.message}>\r\n                  <span style={{ color: \"gray\" }}> id: </span> {dat.id} <br />\r\n                  <span style={{ color: \"gray\" }}> data: </span>\r\n                  {dat.message}\r\n                </li>\r\n              ))}\r\n        </ul>\r\n        <div style={{ padding: \"10px\" }}>\r\n          <input\r\n            type=\"text\"\r\n            onChange={e => this.setState({ message: e.target.value })}\r\n            placeholder=\"add something in the database\"\r\n            style={{ width: \"200px\" }}\r\n          />\r\n          <button onClick={() => this.putDataToDB(this.state.message)}>\r\n            ADD\r\n          </button>\r\n        </div>\r\n        <div style={{ padding: \"10px\" }}>\r\n          <input\r\n            type=\"text\"\r\n            style={{ width: \"200px\" }}\r\n            onChange={e => this.setState({ idToDelete: e.target.value })}\r\n            placeholder=\"put id of item to delete here\"\r\n          />\r\n          <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\r\n            DELETE\r\n          </button>\r\n        </div>\r\n        <div style={{ padding: \"10px\" }}>\r\n          <input\r\n            type=\"text\"\r\n            style={{ width: \"200px\" }}\r\n            onChange={e => this.setState({ idToUpdate: e.target.value })}\r\n            placeholder=\"id of item to update here\"\r\n          />\r\n          <input\r\n            type=\"text\"\r\n            style={{ width: \"200px\" }}\r\n            onChange={e => this.setState({ updateToApply: e.target.value })}\r\n            placeholder=\"put new value of the item here\"\r\n          />\r\n          <button\r\n            onClick={() =>\r\n              this.updateDB(this.state.idToUpdate, this.state.updateToApply)\r\n            }\r\n          >\r\n            UPDATE\r\n          </button>\r\n        </div>\r\n        <div>\r\n          <Navbar />\r\n          \r\n        </div>\r\n        <div className=\"container-fluid\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-2 d-none d-md-block bg-light sidebar\">\r\n              <Profile />\r\n            </div>\r\n            <div className=\"col-md-9\">\r\n              <Container />\r\n              <div className=\"mt-2\">\r\n                <Blog />\r\n                <Product />\r\n                <Button />\r\n              </div>\r\n              <Widget\r\n                handleNewUserMessage={this.handleNewUserMessage}\r\n                profileAvatar={logo}\r\n                title=\"My New Title of Chat\"\r\n                subtitle=\"And subtitle\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}